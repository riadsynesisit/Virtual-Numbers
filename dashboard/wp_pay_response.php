<?php

//Grab all the posted data - to used in debug error e-mails and also saving in database
$posted_data = "";
foreach ($_POST as $key => $value){
	if($posted_data!=""){//Add an ampersand except the for first item
		$posted_data .= "&";
	}
	$posted_data .= $key."=".$value;
}

if(isset($_POST["debug"]) && trim($_POST["debug"])=="true"){
	$debug = true;
}else{
	$debug = false;
}

if($debug){
	echo "In wp_pay_response.php - start of files to include<br />";
}

require("./includes/config.inc.php");
require("./includes/db.inc.php");
require("./classes/SystemConfigOptions.class.php");
require("./classes/Unassigned_087DID.class.php");
require("./classes/Did_Cities.class.php");
require("./classes/Member_credits.class.php");
require("./classes/DidwwAPI.class.php");
require("./classes/Assigned_DID.class.php");
require("./classes/Payments_received.class.php");
require("./classes/Access.class.php");
require("./classes/Shopping_cart.class.php");
require("./classes/Worldpay_preapprovals.class.php");
require("./classes/Worldpay_autorenewals.class.php");
require("./classes/Blacklist_countries.class.php");
require("./classes/Blacklist_ip.class.php");
require("./classes/Free_email_providers.class.php");
require("./classes/Risk_score.class.php");
require("./classes/Block_Destination.class.php");
require("./classes/User.class.php");
require("./classes/Auto_Renewal_Failures.class.php");
require("./classes/Worldpay_pending_captures.class.php");
require("./libs/didww.lib.php");
require("./libs/worldpay.lib.php");
require("./libs/utilities.lib.php");

if($debug){
	echo "In wp_pay_response.php - end of files to include<br />";
}

//Parameters generated by the Purchase Token
$instId = $_POST["instId"];
$cartId = $_POST["cartId"];
$desc = urldecode($_POST["desc"]);
$cost = $_POST["cost"];
$amount = $_POST["amount"];
$amountString = $_POST["amountString"];
$currency = $_POST["currency"];
$authMode = $_POST["authMode"];
$testMode = $_POST["testMode"];							//Empty or 0 indicates Proudction
$name = urldecode($_POST["name"]);
$address1 = urldecode($_POST["address1"]);
$address2 = urldecode($_POST["address2"]);
$address3 = urldecode($_POST["address3"]);
$town = urldecode($_POST["town"]);
$region = urldecode($_POST["region"]);
$postcode = urldecode($_POST["postcode"]);
$country = urldecode($_POST["country"]);
$countryString = urldecode($_POST["countryString"]);
$tel = $_POST["tel"];
$fax = $_POST["fax"];
$email = urldecode($_POST["email"]);
$delvName = urldecode($_POST["delvName"]);
$delvAddress1 = urldecode($_POST["delvAddress1"]);
$delvAddress2 = urldecode($_POST["delvAddress2"]);
$delvAddress3 = urldecode($_POST["delvAddress3"]);
$delvTown = urldecode($_POST["delvTown"]);
$delvRegion = urldecode($_POST["delvRegion"]);
$delvPostcode = urldecode($_POST["delvPostcode"]);
$delvCountry = urldecode($_POST["delvCountry"]);
$delvCountryString = urldecode($_POST["delvCountryString"]);
$compName = urldecode($_POST["compName"]);
if(isset($_POST["futurePayId"])){
	$futurePayId = trim($_POST["futurePayId"]); // added by riad @ 27th Aug 2015
}

if($debug){
	echo "<br />instId=".$instId;
	echo "<br />cartId=".$cartId;
	echo "<br />desc=".$desc;
	echo "<br />cost=".$cost;
	echo "<br />amount=".$amount;
	echo "<br />=amountString".$amountString;
	echo "<br />currency=".$currency;
	echo "<br />authMode=".$authMode;
	echo "<br />testMode=".$testMode;
	echo "<br />name=".$name;
	echo "<br />address1=".$address1;
	echo "<br />address2=".$address2;
	echo "<br />address3=".$address3;
	echo "<br />town=".$town;
	echo "<br />region=".$region;
	echo "<br />postcode=".$postcode;
	echo "<br />country=".$country;
	echo "<br />countryString=".$countryString;
	echo "<br />tel=".$tel;
	echo "<br />fax=".$fax;
	echo "<br />email=".$email;
	echo "<br />delvName=".$delvName;
	echo "<br />delvAddress1=".$delvAddress1;
	echo "<br />delvAddress2=".$delvAddress2;
	echo "<br />delvAddress3=".$delvAddress3;
	echo "<br />delvTown=".$delvTown;
	echo "<br />delvRegion=".$delvRegion;
	echo "<br />delvPostcode=".$delvPostcode;
	echo "<br />delvCountry=".$delvCountry;
	echo "<br />delvCountryString=".$delvCountryString;
	echo "<br />compName=".$compName;
}

//Payment Response parameters  
$transId = $_POST["transId"];
$transStatus = $_POST["transStatus"];					//Y=Authorized, C=Cancelled
$transTime = date("Y-m-d H:i:s",intval(intval($_POST["transTime"])/1000));
$authAmount = $_POST["authAmount"];
$authCost = $_POST["authCost"];
$authCurrency = $_POST["authCurrency"];
$authAmountString = $_POST["authAmountString"];
$rawAuthMessage = $_POST["rawAuthMessage"];
$rawAuthCode = $_POST["rawAuthCode"];
$callbackPW = urldecode($_POST["callbackPW"]);
$cardType = $_POST["cardType"];
$countryMatch = $_POST["countryMatch"];
$AVS = $_POST["AVS"];
$wafMerchMessage = $_POST["wafMerchMessage"];
$authentication = $_POST["authentication"];
$ipAddress = $_POST["ipAddress"];					//Validate shoppers IP address
$charenc = $_POST["charenc"];

if($debug){
	echo "<br />transId=".$transId;
	echo "<br />transStatus=".$transStatus;
	echo "<br />transTime=".$transTime;
	echo "<br />authAmount=".$authAmount;
	echo "<br />authCost=".$authCost;
	echo "<br />authCurrency=".$authCurrency;
	echo "<br />authAmountString=".$authAmountString;
	echo "<br />rawAuthMessage=".$rawAuthMessage;
	echo "<br />rawAuthCode=".$rawAuthCode;
	echo "<br />callbackPW=".$callbackPW;
	echo "<br />cardType=".$cardType;
	echo "<br />countryMatch=".$countryMatch;
	echo "<br />AVS=".$AVS;
	echo "<br />wafMerchMessage=".$wafMerchMessage;
	echo "<br />authentication=".$authentication;
	echo "<br />ipAddress=".$ipAddress;
	echo "<br />charenc=".$charenc;
}

$blnError = false;
$errMsg = "";

//Check if the installation id is correct
if($instId!=WP_INSTID){
	$blnError = true;
	$errMsg = "Invalid instId returned: ".$instId;
	if($debug){ echo "<br />".$errMsg; }
}

if($blnError==false && $debug==true){ echo "<br />WP Installation ID check passed."; }

//Must validate if the payment response is from WorldPay
//Check the cartid
if($blnError==false && (isset($cartId)==false || trim($cartId)=="")){
	$blnError = true;
	$errMsg = "Cart ID not returned from WorldPay.";
	if($debug){ echo "<br />".$errMsg; }
}

if($blnError==false && $debug==true){ echo "<br />Cart ID returned by WP check passed."; }

//Check if the IP Address is returned by WP
if($blnError==false && (isset($ipAddress)==false || trim($ipAddress)=="")){
	if(isset($_SERVER["REMOTE_ADDR"]) && trim($_SERVER["REMOTE_ADDR"])!=""){
		$ipAddress = $_SERVER["REMOTE_ADDR"];
	}else{
		$blnError = true;
		$errMsg = "IP Address not returned from WorldPay for Cart ID: $cartId and also could not be set from SERVER REMOTE_ADDR.";
		if($debug){ echo "<br />".$errMsg; }
	}
}

if($blnError==false && $debug==true){ echo "<br />IP Address returned by WP check passed."; }

//Check payment response Password $callbackPW
//if($callbackPW!="HhPPE$&klE29E"){//Old Payment response password
if($blnError==false && $callbackPW!="gaC5UswU"){//New payment response password
	$blnError = true;
	$errMsg = "Error: Incorrect callback PW.";
	if($debug){ echo "<br />".$errMsg; }
}

if($blnError==false && $debug==true){ echo "<br />CallBakc PW check passed."; }

//Check the payment message header 
//host name must end in .worldpay.com, and that it resolves to the IP address this message is sent from

if($blnError==false){
	if(isset($_POST["futurePayId"]) && trim($_POST["futurePayId"])!="" && strpos($desc," of FuturePay agreement ID $futurePayId")!=false){
		$auto_renewal = true;
		$did_auto_renewed = false;
	}else{
		$auto_renewal = false;
	}
}
if($blnError==false && $debug==true){ echo "<br />Whether Auto Renewal: $auto_renewal"; }

if($blnError==false){
	$shopping_cart = new Shopping_cart();
	if(is_object($shopping_cart)==false){
		$blnError = true;
		$errMsg = "Error: Failed to create Shopping_cart object.";
		if($debug){ echo "<br />".$errMsg; }
	}
}
if($blnError==false && $debug==true){ echo "<br />Shopping_cart object created."; }

$cart_details = "";
if($blnError==false){
	$cart_details = $shopping_cart->get_cart_details($cartId);
	if(is_array($cart_details)==false){
		$blnError = true;
		$errMsg = $cart_details;
		if($debug){ echo "<br />".$errMsg; }
	}
}
if($blnError==false && $debug==true){ echo "<br />Cart Details successfully returned."; }

if($blnError==false){
	$user = new User();
	if(is_object($user)==false){
		$blnError = true;
		$errMsg = "Error: Failed to create User object.";
		if($debug){ echo "<br />".$errMsg; }
	}
}
if($blnError==false && $debug==true){ echo "<br />User object created."; }

if($blnError==false){
	$risk_score_obj = new Risk_score();
	if(is_object($risk_score_obj)==false){
		$blnError = true;
		$errMsg = "Error: Failed to create Risk_score object.";
		if($debug){ echo "<br />".$errMsg; }
	}
}

if($blnError==false && $debug==true){ echo "<br />Risk_score object created."; }

if($blnError==false){
	$assigned_did = new Assigned_DID();
	if(is_object($assigned_did)==false){
		$blnError = true;
		$errMsg = "Error: Failed to create Assigned_DID object.";
		if($debug){ echo "<br />".$errMsg; }
	}
}

if($blnError==false && $debug==true){ echo "<br />Assigned_DID object created."; }

if($blnError==false){
	$auto_renewal_failures = new Auto_Renewal_Failures();
	if(is_object($auto_renewal_failures)==false){
		$blnError = true;
		$errMsg = "Error: Failed to create Auto_Renewal_Failures object.";
		if($debug){ echo "<br />".$errMsg; }
	}
}

if($blnError==false && $debug==true){ echo "<br />Auto_Renewal_Failures object created."; }

if($blnError==false){
	$wp_pending_captures = new Worldpay_pending_captures();
	if(is_object($wp_pending_captures)==false){
		$blnError = true;
		$errMsg = "Error: Failed to create Worldpay_pending_captures object.";
		if($debug){ echo "<br />".$errMsg; }
	}
}

if($blnError==false && $debug==true){ echo "<br />Worldpay_pending_captures object created."; }

//Check transaction status $transStatus
if($blnError==false && $transStatus!='Y'){
	if($transStatus=="N" && strpos($rawAuthMessage,"declined")!=false){
		$notes = "Card declined";
		//Card declined - Save in database
		$status = $user->increaseCardDeclinedAttempts($cart_details["user_id"]);
		if($status !== true && substr($status,0,5)=="Error"){
			$blnError = true;
			$errMsg = "Error: Failed to increase card declined attemtps. $status";
			if($debug){ echo "<br />".$errMsg; }
		}
		if($blnError==false){
			$blnError = true;
			$errMsg = "Error: Payment not successful. Transation Status is: ".$transStatus.", Message is: ".$rawAuthMessage;
			if($debug){ echo "<br />".$errMsg; }
		}
	}else{
		$blnError = true;
		$errMsg = "Error: Transaction Status is $transStatus";
		if($debug){ echo "<br />".$errMsg; }
		$notes = "Transaction Status is $transStatus";
	}
	if($blnError==false && $debug==true){ echo "<br />Unsuccessful transStatus at WP."; }
	if($auto_renewal==true){
		//Save a record in auto_renewal_failures table
		save_auto_renewal_failure($auto_renewal_failures, $cart_details, $rawAuthMessage."&error_custome=billing_failed", $posted_data);
		//Get the user_specific information for the contents of the email to be sent to client
		$query = "
				select ad.did_number as did_number, 
						date_format(ad.did_expires_on,'%d/%m/%y') as expiry_date, 
						sc.description as description, 
						ul.email as email, 
						ul.name as name, 
						concat('M',ul.id+10000) as member_id, 
						ul.site_country as site_country	
					from assigned_dids ad, 
						shopping_cart sc, 
						user_logins ul 
					where ad.id=sc.did_id and 
						ad.user_id=ul.id and 
						sc.id=$cartId
				";
		$result = mysql_query($query);
		if($debug && mysql_error()!=""){
			$errMsg =  "An error occurred while executing the query. Error is: ".mysql_error()."\n\nQuery is: ".$query;
			$blnError = true;
			echo "<br />".$errMsg;
		}
		if($blnError==false){
			$row=mysql_fetch_array($result);
			//Send auto billing failed email notice to client
			$status = send_auto_billing_failed_email($row['email'], $row['name'], $row['member_id'], $row['description'], $row['did_number'], $row['site_country'], $row['expiry_date'], $notes);
			if($debug){
				if($status===true){
					echo "\nSuccessfully sent auto billing failed email to client.";
				}else{
					echo "\nFailed to send auto billing failed email to client. ".$status;
				}
			}
		}
	}
}elseif($blnError==false && $transStatus=='Y'){
	//Reset number of card_declined_attempts to zero
	$status = $user->resetCardDeclinedAttempts($cart_details["user_id"]);
	if($status !== true && substr($status,0,5)=="Error"){
		$blnError = true;
		$errMsg = "Failed to reset card declined attemtps. $status";
		if($debug){ echo "<br />".$errMsg; }
		if($auto_renewal==true){
			//Save a record in auto_renewal_failures table
			save_auto_renewal_failure($auto_renewal_failures, $cart_details, $errMsg, $posted_data);
		}
	}
	if($blnError==false && $debug==true){ echo "<br />Successful transStatus at WP."; }
}

$status = "";

//Calculate the risk score - and create a record in risk_score table
if($blnError==false){
	$risk_score = process_risk_score($cartId,$country,$ipAddress);
	if(substr($risk_score,0,6)=="Error:"){
		$blnError = true;
		$errMsg = $risk_score;
		if($debug){ echo "<br />".$errMsg; }
		if($auto_renewal==true){
			//Save a record in auto_renewal_failures table
			save_auto_renewal_failure($auto_renewal_failures, $cart_details, $errMsg."&error_custom=Risk_Score_Calculation", $posted_data);
		}
	}	
}

if($blnError==false && $debug==true){ echo "<br />Risk Score Calculated."; }

//Now update the order status as Payment Gateway AUTHORISED (order status=5 for authorised)
if($blnError==false){
	$status = $risk_score_obj->update_order_status(trim($cartId),5);
	if(is_bool($status)===false || $status!=true || substr($status,0,6)=="Error:"){
		$blnError = true;
		$errMsg = $status;
		if($debug){ echo "<br />".$errMsg; }
		if($auto_renewal==true){
			//Save a record in auto_renewal_failures table
			save_auto_renewal_failure($auto_renewal_failures, $cart_details, $errMsg."&error_custom=Update_status_failed_RS", $posted_data);
		}
	}
}
if($blnError==false && $debug==true){ echo "<br />Set order status to 5 in risk_score."; }

if($blnError==false){
	$user_details = $user->getUserInfoById($cart_details["user_id"]);
	if($user_details==false){
		$blnError = true;
		$errMsg = "Error: An error occurred while getting user deatils by user id.";
		if($debug){ echo "<br />".$errMsg; }
		if($auto_renewal==true){
			//Save a record in auto_renewal_failures table
			save_auto_renewal_failure($auto_renewal_failures, $cart_details, $errMsg, $posted_data);
		}
	}
}
if($blnError==false && $debug==true){ echo "<br />User details retrieved."; }

$site_country = "";
$return_server_web_name = "";
if($blnError==false){
	$site_country = $user_details["site_country"];
	$return_server_web_name = SERVER_WEB_NAME;
	/*if($site_country=="COM"){
		if(substr(SERVER_WEB_NAME,-3)==".au"){
			$return_server_web_name = substr(SERVER_WEB_NAME,0,strlen(SERVER_WEB_NAME)-3);
		}else{
			$return_server_web_name = SERVER_WEB_NAME;
		}
	}else{
		$return_server_web_name = SERVER_WEB_NAME;
	}*/
}
if($blnError==false && $debug==true){ echo "<br />Return server web name retrieved: $return_server_web_name"; }

//Identify whether this is a future pay transaction or a non-future pay transaction
$futurePayId = "";
$did_details = "";
$wp_autorenewals = "";
if($blnError==false && isset($_POST["futurePayId"]) && trim($_POST["futurePayId"])!=""){
	if($blnError==false && $debug==true){ echo "<br />Future pay transaction: YES."; }
	$futurePayId = trim($_POST["futurePayId"]);
	if(strpos($desc," of FuturePay agreement ID $futurePayId")!=false){
		//Complete all the future pay related payment processing like order fulfillment here
		
		//Reset the paid, fulfilled fulfilled_time before the renewal
		if($blnError==false){
			$status = $shopping_cart->reset_paid_fulfilled($cartId);
			if($status!="success"){
				$blnError = true;
				$errMsg = $status;
				if($debug){ echo "<br />".$errMsg; }
				//Save a record in auto_renewal_failures table
				save_auto_renewal_failure($auto_renewal_failures, $cart_details, $errMsg."&error=Reset_paid_fulfilled", $posted_data);
			}
		}
		if($blnError==false && $debug==true){ echo "<br />Reset paid and fulfilled in shopping cart."; }
		
		//Save the transaction details in database even before attempting to capture the payment from WP
		if($blnError==false){
			$status = $shopping_cart->update_trans_details($cartId, $transId, $transStatus, $transTime, $ipAddress);
			if($status!="success"){
				$blnError = true;
				$errMsg = $status;
				if($debug){ echo "<br />".$errMsg; }
				//Save a record in auto_renewal_failures table
				save_auto_renewal_failure($auto_renewal_failures, $cart_details, $errMsg, $posted_data);
			}
		}
		if($blnError==false && $debug==true){ echo "<br />Updated transaction details in shopping cart."; }
		
		if($blnError==false){
			$status = create_payments_received_record($cartId,$auto_renewal);
			if(substr($status,0,6)=="Error:"){
				$blnError = true;
				$errMsg = $status;
				if($debug){ echo "<br />".$errMsg; }
				//Save a record in auto_renewal_failures table
				save_auto_renewal_failure($auto_renewal_failures, $cart_details, $errMsg, $posted_data);
			}
		}
		if($blnError==false && $debug==true){ echo "<br />Payment received record created."; }
		
		if($blnError==false){
			//Check if the DID_ID is available
			if(trim($cart_details["did_id"])==""){
				$blnError = true;
				$errMsg = "Error: did_id missing in shopping_cart for cart_id: $cartId";
				if($debug){ echo "<br />".$errMsg; }
				//Save a record in auto_renewal_failures table
				save_auto_renewal_failure($auto_renewal_failures, $cart_details, $errMsg, $posted_data);
			}
		}
		if($blnError==false && $debug==true){ echo "<br />DID_ID: ".$cart_details["did_id"]." available check passed."; }
		
		//Renew the DID here
		if($blnError==false){
			//First get the existing expiry date of the DID
			$did_old_expiry_date = $assigned_did->getDIDExpiryFromID($cart_details["did_id"]);
			if($did_old_expiry_date==0){$did_old_expiry_date = "0000-00-00 00:00:00";}
			$did_details = processDIDPurchase($cart_details["user_id"], $cart_details["did_plan"], $cart_details["plan_period"], $cart_details["num_of_months"], "renew_did", $cart_details["pymt_type"], $cart_details["did_id"], $cart_details["id"]);
			if(is_array($did_details)==false && substr($did_details,0,6)=="Error:"){
				$blnError = true;
				$errMsg = $did_details;
				if($debug){ echo "<br />".$errMsg; }
				//Save a record in auto_renewal_failures table
				save_auto_renewal_failure($auto_renewal_failures, $cart_details, $errMsg."&error=DIDWW_renew", $posted_data);
				
				//$status = $risk_score_obj->updateRenewFailed($cartId, 'Y');
				//if($debug){ echo "<br />".$status; }
			}else{
				$did_new_expiry_date = $did_details["did_expiry_raw"];
				$did_auto_renewed = true;
			}
		}
		if($blnError==false && $did_auto_renewed==true && $debug==true){ echo "<br />DID Renewed successfully until : ".$did_new_expiry_date." Old DID Expiry date was: ". $did_old_expiry_date; }
		
		//Save in database so that we know what numbers were successfully updated by auto pay
		if($blnError==false){
			$wp_autorenewals = new Worldpay_autorenewals();
			if(is_object($wp_autorenewals)==false){
				$blnError = true;
				$errMsg = "Error: Failed to create Worldpay_autorenewals object.";
				if($debug){ echo "<br />".$errMsg; }
			}
		}
		if($blnError==false && $debug==true){ echo "<br />WP auto renewals object created."; }
		
		if($blnError==false){
			$status = $wp_autorenewals->add_record($cartId, $futurePayId, $desc, $amount, $transId, $transStatus, $transTime, $authAmount, $did_old_expiry_date, $did_new_expiry_date);
			if(substr($status,0,6)=="Error:"){
				$blnError = true;
				$errMsg = "Error: Failed to add record to worldpay_autorenewals. ".$status;
				if($debug){ echo "<br />".$errMsg; }
			}
		}
		if($blnError==false && $debug==true){ echo "<br />Record added to WP Auto renewals table."; }
		
		//Now update the order_status in risk_score table as completed.
		if($blnError==false){
			$status = $risk_score_obj->update_order_status($cartId, 1);//Mark this order as completed : Order Status = 1
			if($status !== true){
			    $blnError = true;
			    $errMsg = "Error: Failed to update the order status to completed for CartID: $cartId. $status";
				if($debug){ echo "<br />".$errMsg; }
			}
		}
		if($blnError==false && $debug==true){ echo "<br />Order status in risk scroe updated as completed."; }
		
		//Now reset the monthly amount in the DID available for making calls
		$status = $assigned_did->reset_balance($cart_details["did_id"]);
		if(is_bool($status)==false && substr($status,0,6)=="Error:"){
			$blnError = true;
			$errMsg = "Error: Failed to update balance for CartID: $cartId. $status";
			if($debug){ echo "<br />".$errMsg; }
		}
		
		//We need a time gap between the payment and capture
		//So save the transId and cartID to run the capture later through a cron job
		if($blnError==false){
			$status = $wp_pending_captures->add_wp_pending_captures_record($transId, $cartId);
			if(is_int($status)==false &&  substr($status,0,6)=="Error:"){
				$blnError = true;
				$errMsg = $status;
				if($debug){ echo "<br />".$errMsg; }
			}
			if($blnError==false && $debug==true){ echo "<br />Successfully added wp_pending_captures record."; }
		}
		
		//Now capture the payment
		/*if($blnError==false){
			$status = capture_wp_payment($transId, $cartId);
			if(is_bool($status)==false && substr($status,0,6)=="Error:"){
				$blnError = true;
				$errMsg = $status;
				if($debug){ echo "<br />".$errMsg; }
			}
			if($blnError==false && $debug==true){ echo "<br />Successfully captured payment."; }
		}*/
		exit;//No need to proceed any further
	}//End of if(strpos($desc," of FuturePay agreement ID $futurePayId")!=false){
}

if($blnError==false && $debug==true){ echo "<br />did auto renewal status is : ." . $did_auto_renewed; }
if($auto_renewal==true and $did_auto_renewed==false){//For an auto renewal if it gets to this point without renewal - it is not right
	if($blnError==false && $debug==true){ echo "<br />debug with auto failed so .......reset balance now."; }
	// set balance to zero as auto renewals failed:: 14th April 2015
	if( $blnError==false && $cart_details["did_id"]){
		$status = $assigned_did->reset_balance($cart_details["did_id"], true, 0.0) ;
	}
	//Save a record in auto_renewal_failures table
	save_auto_renewal_failure($auto_renewal_failures, $cart_details, $errMsg, $posted_data);
	exit;//No need to proceed any further
}

$wp_preapprovals = new Worldpay_preapprovals();
if($blnError==false && is_object($wp_preapprovals)==false){
	$blnError = true;
	$errMsg = "Could not create Worlppay_preapprovals object.";
	if($debug){ echo "<br />".$errMsg; }
}
if($blnError==false && $debug==true){ echo "<br />Worldpay_preapprovals object created."; }

if($blnError==false && $futurePayId!=""){//Need to save the future pay id in the database table
	$status = $wp_preapprovals->add_record($cartId,$futurePayId);
}
if($blnError==false && $debug==true){ echo "<br />Record added to Worldpay preapprovals."; }

if($blnError==false && $futurePayId!="" && $status!==TRUE){
	$blnError = true;
	$errMsg = $status;
	if($debug){ echo "<br />".$errMsg; }
}

if($blnError==false && $risk_score<0){//Capture the payment here
	
	if($blnError==false && $debug==true){ echo "<br />LOW Risk transaction. Attempting to capturing payment."; }
	//Save the transaction details in database even before attempting to capture the payment from WP
	$status = $shopping_cart->update_trans_details($cartId, $transId, $transStatus, $transTime, $ipAddress);
	if($status!="success"){
		$blnError = true;
		$errMsg = $status;
		if($debug){ echo "<br />".$errMsg; }
	}
	if($blnError==false && $debug==true){ echo "<br />Trans Details updated in shopping cart."; }
	
	//Now capture the payment
	if($blnError==false){
		$status = capture_wp_payment($transId, $cartId);
		if(is_bool($status)==false && substr($status,0,6)=="Error:"){
			$blnError = true;
			$errMsg = $status;
			if($debug){ echo "<br />".$errMsg; }
		}
		if($blnError==false && $debug==true){ echo "<br />Successfully captured payment."; }
	}
	//Update Risk Score - Mark this order as completed : Order Status = 1 - this is done in capture_wp_payment function called above.
	
	//Update the shopping_cart record - Must be done before creating the payments received record.
	if($blnError==false){
		$status = $shopping_cart->update_paid($cartId, $transId, $transStatus, $transTime, $ipAddress);
	}
	if($blnError==false && $debug==true){ echo "<br />Updated shopping cart as paid."; }
	
	if($blnError==false && $status!="success"){
		$blnError = true;
		$errMsg = $status;
		if($debug){ echo "<br />".$errMsg; }
	}
	
	if($blnError==false){
		$status = create_payments_received_record($cartId,$auto_renewal);
		if(substr($status,0,6)=="Error:"){
			$blnError = true;
			$errMsg = $status;
			if($debug){ echo "<br />".$errMsg; }
		}
		if($blnError==false && $debug==true){ echo "<br />Payment received record created."; }
	}
}elseif($blnError==false){//Higher risk_score - still need to save transaction details which are required during manual processing
	if($blnError==false && $debug==true){ echo "<br />HIGH risk transaction."; }
	$status = $shopping_cart->update_trans_details($cartId, $transId, $transStatus, $transTime, $ipAddress);
	if($status!="success"){
		$blnError = true;
		$errMsg = $status;
		if($debug){ echo "<br />".$errMsg; }
	}
	if($blnError==false && $debug==true){ echo "<br />Trans details updated in shopping cart."; }
}

//Get the page or location to return to
$return_to = "";
if($blnError==false){
	$return_to = trim($shopping_cart->get_return_to($cartId));
}
if($blnError==false && $debug==true){ echo "<br />Page return to location is $return_to."; }

if($blnError==false && substr($return_to,0,6)=="Error:"){
	$blnError = true;
	$errMsg = $return_to;
	if($debug){ echo "<br />".$errMsg; }
}

if($blnError==false && $return_to!="Slider" && $return_to!="AccountCredit" && $return_to!="NumberRoutes" && $return_to!="MemberArea"){
	$blnError = true;
	$errMsg = "Invalid return to location: ".$return_to." for cartId :".$cartId;
	if($debug){ echo "<br />".$errMsg; }
}

function save_auto_renewal_failure($auto_renewal_failures, $cart_details, $error_message, $notes, $debug="false"){
	
	//Save a record in auto_renewal_failures table
	$failure_reason = "";
	if(strstr($error_message, "DIDWW_renew")){
		$failure_reason = "DIDWW_renew";
	}else if(strstr($error_message, "declined")){
		$failure_reason = "Card_declined";
	}else if(strstr($error_message, "Risk_Score")){
		$failure_reason = "Risk_Score Calculation";
	}else if(strstr($error_message, "billing")){
		$failure_reason = "billing_failed";
	}else if(strstr($error_message, "did_id missing")){
		$failure_reason = "DID id missing Shopping cart";
	}else if(strstr($error_message, "Update_status")){
		$failure_reason = "Risk_Score Update status failed";
	}else if(strstr($error_message, "Reset_paid")){
		$failure_reason = "Shopping_cart Update Error";
	}
	
	$script_name = __FILE__ ;
	
	$status = $auto_renewal_failures->insert_auto_renewal_failure($cart_details['id'], $error_message, $notes, $script_name, $failure_reason);
	
	
	$this_access = new Access();
	$this_access->updateAccessLogs($error_message, false, false, $cart_details["did_number"], $cart_details['user_id']);
		
		
	if($debug){
		if(is_bool($status)==false && substr($status,0,6)=="Error:"){
			echo "\nAn Error occurred while inserting a record in auto renewal failues. ".$status;
		}elseif(is_bool($status)==true && $status==true){
			echo "\nSuccessfully inserted a record in auto renewal failures.";
		}else{
			echo "\nUnexpected status returned by auto renewals failure insert record method. ".$status;
		}
	}
	
}

?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">    
  <head>
  <?php if($blnError==false){ ?>
  	<?php if($return_to == "Slider"){ ?>
  		<meta http-equiv="refresh" content="0;URL='<?php echo $return_server_web_name; ?>/?cartId=<?php echo $cartId; ?>'" />
  	<?php }elseif($return_to == "AccountCredit"){ ?>
  		<meta http-equiv="refresh" content="0;URL='<?php echo $return_server_web_name; ?>/dashboard/add_account_credit.php?cartId=<?php echo $cartId; ?>'" />
  	<?php }elseif($return_to == "NumberRoutes"){ ?>
  		<meta http-equiv="refresh" content="0;URL='<?php echo $return_server_web_name; ?>/dashboard/edit_routes.php?cartId=<?php echo $cartId; ?>'" />
  	<?php }elseif($return_to == "MemberArea"){ ?>
  		<meta http-equiv="refresh" content="0;URL='<?php echo $return_server_web_name; ?>/dashboard/new_did.php?cartId=<?php echo $cartId; ?>'" />
  	<?php } ?>
  <?php }else{//IF there is any error ?>
  	<?php if($return_to == "Slider"){ ?>
  		<meta http-equiv="refresh" content="0;URL='<?php echo $return_server_web_name; ?>/?cartId=<?php echo $cartId; ?>&errMsg=<?php echo $errMsg; ?>'" />
  	<?php }elseif($return_to == "AccountCredit"){ ?>
  		<meta http-equiv="refresh" content="0;URL='<?php echo $return_server_web_name; ?>/dashboard/add_account_credit.php?cartId=<?php echo $cartId; ?>&errMsg=<?php echo $errMsg; ?>'" />
  	<?php }elseif($return_to == "NumberRoutes"){ ?>
  		<meta http-equiv="refresh" content="0;URL='<?php echo $return_server_web_name; ?>/dashboard/edit_routes.php?cartId=<?php echo $cartId; ?>&errMsg=<?php echo $errMsg; ?>'" />
  	<?php }elseif($return_to == "MemberArea"){ ?>
  		<meta http-equiv="refresh" content="0;URL='<?php echo $return_server_web_name; ?>/dashboard/new_did.php?errMsg=<?php echo $errMsg; ?>'" />
  	<?php } ?>
  <?php } ?>
  </head>
  <body>Redirecting ...<br />
  <?php 
  	if($blnError==true){
		echo $errMsg;
	}
  ?><br />
  	<WPDISPLAY ITEM=banner>
  </body>
</html>